package s136

/*
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

说明：

你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

示例 1:

输入: [2,2,1]
输出: 1
示例 2:

输入: [4,1,2,1,2]
输出: 4

思路：
首先题目有两点要求，一个是线程复杂度了，那么肯定不能暴力了，采用hashtable来实现O(n)
第二点要求，不利用额外的空间，嗯，这个就把hashtable的方案给否了，但是可以在hashtable中发现一个额删除一个

有一个比较奇特的思路，就是利用异或计算，因为异或遵循一个规律 a^b^a=b，并且题目中提到每个重复的元素只会出现两次，那么正好符合这个规律
*/

func singleNumber(nums []int) int {

	ret := 0
	for _,v :=range nums{
		ret^=v
	}

	return ret
}


