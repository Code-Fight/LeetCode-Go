package s448

/*
给定一个范围在 1 ≤ a[i] ≤ n (n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。

找到所有在 [1, n] 范围之间没有出现在数组中的数字。

您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。

示例:

输入:
[4,3,2,7,8,2,3,1]

输出:
[5,6]

思路：

遍历输入数组的每个元素一次。
我们将把 |nums[i]|-1 索引位置的元素标记为负数。
说明该位置有元素
然后遍历数组，若当前数组元素 nums[i] 为负数，说明我们在数组中存在数字 i+1。

如果，该位置的数字依然大于0，说明该位置+1的值没有出现

然后，再遍历一遍，取出其中的负数的位置的索引加1即可

*/

import "math"

func findDisappearedNumbers(nums []int) []int {

	// 先遍历所有的数，并将对应的索引值变为赋值，
	// 注意这里要取一下绝对值 因为有可能这个位置已经被别的索引改过了
	for i:=0;i<len(nums);i++{

		curr := int(math.Abs(float64(nums[i])))

		// 将该位置得值 置为 负数
		nums[curr-1] = int(math.Abs(float64(nums[curr-1])) * -1)

	}

	ret := make([]int,0)
	for i:=0;i<len(nums);i++{
		if nums[i]>0{
			ret = append(ret, i+1)
		}
	}
	return ret
}
