package s461

/*
汉明距离是以理查德·卫斯里·汉明的名字命名的。在信息论中，两个等长字符串之间的汉明距离是两个字符串对应位置的不同字符的个数。
换句话说，它就是将一个字符串变换成另外一个字符串所需要替换的字符个数。

注意：
0 ≤ x, y < 231.

示例:

输入: x = 1, y = 4

输出: 2

解释:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑

上面的箭头指出了对应二进制位不同的位置。

思路：
暴力法就是都转二进制 然后 对比 复杂度很高

利用二进制计算的特性，异或，相同的位为0，不同的位为1，那么再把结果转二进制字符串，然后看有多少个1就可以了
*/

import "strconv"


func hammingDistance(x int, y int) int {
	num := x^y
	s:=0
	for ;num > 0 ; num /= 2 {
		lsb := num % 2
		// strconv.Itoa() 将数字强制性转化为字符串
		if strconv.Itoa(lsb) =="1"{
			s++
		}

	}
	return s

}
