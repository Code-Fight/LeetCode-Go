package s461

/*
汉明距离是以理查德·卫斯里·汉明的名字命名的。在信息论中，两个等长字符串之间的汉明距离是两个字符串对应位置的不同字符的个数。
换句话说，它就是将一个字符串变换成另外一个字符串所需要替换的字符个数。

注意：
0 ≤ x, y < 231.

示例:

输入: x = 1, y = 4

输出: 2

解释:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑

上面的箭头指出了对应二进制位不同的位置。

思路：
暴力法就是都转二进制 然后 对比 复杂度很高

利用二进制计算的特性，异或，相同的位为0，不同的位为1，那么再把结果转二进制字符串，然后看有多少个1就可以了
*/


func hammingDistance(x int, y int) int {
	// 利用异或的性质,(相同为0,不同为1),
	// 得到一个新的二进制数,
	// 下一步需要把这个二进制数中的1进行统计.
	i := x ^ y
	count := 0   //定义数量的初始值为0
	for i != 0 { //只要i不为0,那就继续循环
		if (i & 1) == 1 { //如果i和1相与,值为1的话就count++
			count++
		}
		i = i >> 1 //i右移一位
	}
	return count

}
